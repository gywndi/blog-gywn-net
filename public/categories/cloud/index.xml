<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloud on gywn&#39;s tech</title>
    <link>//localhost:1313/categories/cloud/</link>
    <description>Recent content in Cloud on gywn&#39;s tech</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>gywndi@gmail.com (gywndi)</managingEditor>
    <webMaster>gywndi@gmail.com (gywndi)</webMaster>
    <lastBuildDate>Tue, 19 Aug 2025 20:01:39 +0900</lastBuildDate>
    <atom:link href="//localhost:1313/categories/cloud/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL Heatwave를 살펴보았습니다</title>
      <link>//localhost:1313/2022/05/mysql-heatwave/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2022/05/mysql-heatwave/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;안녕하세요. 너무 오랜만에 글을 올려봅니다. 올해도 벌써 반이 훌쩍지나버렸네요.&lt;/p&gt;&#xA;&lt;p&gt;MySQL을 쓰시는 분들, 아니 &lt;strong&gt;RDBMS를 써오시던 분들의 가장 가려운 부분은 개인적으로 통계 쿼리 수행 속도&lt;/strong&gt;라고 봅니다. 특히나 데이터 사이즈가 하루가 다르게 폭발적으로 증가해가는 상황에서 너무나도 반가운 소식이라고 봅니다. HTAP(Hybrid transactional/analytical processing) 구현이라 하는데..&lt;/p&gt;&#xA;&lt;p&gt;오늘 이 포스팅에서는 서비스 활용 관점으로 Heatwave를 이야기해보도록 하겠습니다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;mysql-heatwave는&#34;&gt;MySQL Heatwave는?&lt;/h1&gt;&#xA;&lt;p&gt;Oracle Cloud에서 제공하는 OLAP 분산 클러스터로, MySQL의 InnoDB데이터를 자동으로 Heatwave 클러스터로 동기화하여, 제공하는 스토리지 엔진 플러그인입니다.&#xA;&lt;img src=&#34;https://dev.mysql.com/doc/heatwave/en/images/hw-ml-genai-architecture.png&#34; alt=&#34;Content is described in the surrounding text&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>아마존의 가상 RDBMS인 Amazon RDS의 특성 몇 가지</title>
      <link>//localhost:1313/2012/08/amazon-rds-feature/</link>
      <pubDate>Fri, 10 Aug 2012 05:26:37 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2012/08/amazon-rds-feature/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;지난 해 말 글로벌 서비스를 겨냥하여 Amazon 가상 플랫폼 상에 인증 서비스를 오픈하였고, 올해 초에는 푸딩.투 서비스 또한 런칭하여 서비스 중에 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;글로벌 서비스를 위한 저장소로는 아마존에서 제공하는 가상 관계형 DBMS인 Amazon RDS를 사용 중입니다.&lt;/p&gt;&#xA;&lt;p&gt;이번 포스팅에서는 Amazon RDS에 대한 특성 몇 가지를 설명 드리겠습니다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;virtual-database-instance&#34;&gt;Virtual Database Instance&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Amazon RDS는 Virtual Database Instance입니다.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;DBMS는 데이터를 처리하는 미들웨어이고, 미들웨어는 OS 기반 위에서 동작합니다. 일반적인 상황이라면 OS에 접근하여 그에 맞게 DBMS를 설치하고, 관련 파라메터도 정의를 해야만 하지만, 모든 것이 &amp;ldquo;웹 콘솔&amp;rdquo; 상에서 간단하게 처리합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Amazon RDS에서 유실된 데이터 복원하기</title>
      <link>//localhost:1313/2012/06/how-to-recover-data-on-amazon-rds/</link>
      <pubDate>Tue, 05 Jun 2012 09:48:52 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2012/06/how-to-recover-data-on-amazon-rds/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;**Amazon Relational Database Service(Amazon RDS)**는 클라우드에서 관계형 데이터베이스를 쉽게 설치, 운영 및 확장할 수 있는 서비스입니다.&lt;/p&gt;&#xA;&lt;p&gt;자원을 유연하게 배분할 수 있는 이점이 있는 클라우드이지만, 모든 서비스는 결국에는 사람 손을 거쳐야 하고, 때로는 인재로 인한 데이터 유실 사고가 발생할 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;사용이 편리하게 구현되어 있지만, &lt;strong&gt;사용자에게 제공하는 권한 또한 상당히 제약적&lt;/strong&gt;(인스턴스 관리자일지라도)입니다.&lt;/p&gt;&#xA;&lt;p&gt;오늘은 Amazon RDS 상에서 데이터 유실 장애가 발생한 경우 대처할 수 있는 방안에 관하여 포스팅하도록 하겠습니다. (기준은 MySQL이나 타 DBMS도 큰 차이가 없을 것 같네요^^)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
