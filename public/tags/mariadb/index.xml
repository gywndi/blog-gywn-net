<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mariadb on gywn&#39;s tech</title>
    <link>//localhost:1313/tags/mariadb/</link>
    <description>Recent content in Mariadb on gywn&#39;s tech</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>gywndi@gmail.com (gywndi)</managingEditor>
    <webMaster>gywndi@gmail.com (gywndi)</webMaster>
    <lastBuildDate>Fri, 12 Oct 2018 00:00:52 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/mariadb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[MySQL] Online Alter에도 헛점은 있더구나 – gdb, mysqld-debug 활용 사례</title>
      <link>//localhost:1313/2018/10/online-alter-for-varchar/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:52 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2018/10/online-alter-for-varchar/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;MySQL에서도 5.6부터는 온라인 Alter 기능이 상당부분 제공되기 시작했습니다. 인덱스과 칼럼 추가/삭제 뿐만 아니라, varchar 경우에는 부분적으로 칼럼 확장이 서비스 중단없이 가능한 것이죠. 물론 오라클 유저들에게는 당연한 오퍼레이션들이, MySQL에서는 두손들고 운동장 20바퀴 돌 정도로 기뻐할만한 기능들입니다. 물론, 대부분의 DDL을 테이블 잠금을 걸고 수행하던 5.5 시절에도 online alter를 위해 트리거 기반의 pt-online-schema-change 툴을 많이들 사용했었기에.. 서비스 중단이 반드시 필요하지는 않았지만요. (&lt;a href=&#34;//localhost:1313/2017/08/small-talk-pt-osc/&#34;&gt;소소한 데이터 이야기 – pt-online-schema-change&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;아무튼 이렇게 online alter가 대거 지원하는 상황 속에서, MySQL의 메뉴얼과는 다르게 잘못 동작하는 부분이 있었는데, 이 원인을 찾아내기 위해서는 MySQL 내부적으로 어떻게 동작을 하는지 알아내기 위해 며칠 우물을 신나게 파보았습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PowerDNS와 MySQL로 DNS를 해보고 싶어요~</title>
      <link>//localhost:1313/2017/01/install_powerdns_with_mysql_backend/</link>
      <pubDate>Tue, 17 Jan 2017 13:54:29 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2017/01/install_powerdns_with_mysql_backend/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;PowerDNS란 범용적(?)으로 사용되는 오픈소스 기반의 DNS서버이고, 다양한 백엔드를 지원하는 멋진(?) DNS 이기도 합니다. 얼마전, 이 관련되어 간단한 사례에 대해 세미나를 진행을 하였고, 이 구성에 대한 설명이 미흡하여 간단하게 정리해봅니다. ^^&lt;/p&gt;&#xA;&lt;h1 id=&#34;install-powerdns&#34;&gt;Install PowerDNS&lt;/h1&gt;&#xA;&lt;p&gt;CentOS 6.7 버전에서 구성을 하였고, 실제 설치 작업에는 아래와 같이 같단합니다.&lt;br&gt;&#xA;(참고 : &lt;a href=&#34;https://doc.powerdns.com/md/authoritative/installation/#binary-packages&#34;&gt;https://doc.powerdns.com/md/authoritative/installation/#binary-packages&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ yum install pdns&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ yum install pdns-backend-mysql&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(단, 여기서 MySQL 은 이미 구성되어 있다는 가정하에 진행합니다.)&lt;/p&gt;&#xA;&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;&#xA;&lt;p&gt;자~ 이제 DNS 데몬을 설치하였으니..(두줄에.. 끝? -_-;; 헐~)&lt;/p&gt;</description>
    </item>
    <item>
      <title>pt-online-schema-change에 숨겨진 무시무시한 이슈!</title>
      <link>//localhost:1313/2016/09/pt-online-schema-change-pk-change-problem/</link>
      <pubDate>Sun, 25 Sep 2016 15:30:47 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2016/09/pt-online-schema-change-pk-change-problem/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;최근들어 거의 연단위로 블로깅을 하나씩 올리는 듯 하는군요. 여기저기 시국이 어지럽고, 바쁘다는 말도 안되는 핑계를 무마시키기 위해.. 아무튼 간만에 블로깅 하나 올려봅니다.&lt;/p&gt;&#xA;&lt;p&gt;MySQL은.. 특히나 온라인 스키마 변경이 취약합니다. 물론 5.6부터는 online alter기능이 포함되어 있다고는 하나.. 100% 완벽하게 모든 상황을 온라인스럽게 제공해주지도 않고.. 그렇다하더라도, 일정 트래픽 이상의 데이터 변경이 이루어지는 경우, 게다가 슬레이브 지연을 염두한다면.. 꺼려지는 상황이 있지요. (참고로, 마스터에서 온라인 스키마 변경이 이루어졌을지라도, 이 관련 alter구문이 슬레이브로 넘어갔을 때는, alter이후 데이터 변경을 수행해야 하므로, 그만큼 복제 지연이 발생합니다. 미네럴~)&lt;/p&gt;</description>
    </item>
    <item>
      <title>파티션 제약 극복기! 유니크한 토큰 값을 만들어보자!</title>
      <link>//localhost:1313/2015/07/generate-unique-token-on-partitioning-table/</link>
      <pubDate>Fri, 03 Jul 2015 14:15:42 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2015/07/generate-unique-token-on-partitioning-table/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;MySQL에는 날짜 별 데이터 관리를 위해 파티셔닝이라는 좋은 기능(?)을 5.1버전부터 무료(!)로 제공합니다. 일정 시간 지난 후 불필요한 데이터는 간단하게 해당 파티셔닝을 제거하면, 굳이 DELETE 쿼리로 인한 오버헤드를 방지할 수 있죠.&lt;/p&gt;&#xA;&lt;p&gt;그러나, 파티셔닝 적용 시, **&amp;ldquo;파티셔닝 키는 반드시 PK에 포함되어야 한다&amp;rdquo;, &amp;ldquo;추가 제약조건(유니크 속성)을 부여할 수 없다&amp;rdquo;**라는 대표적인 제약 조건으로 인하여, 유니크 속성을 가지는 데이터를 파티셔닝 적용이 불가한 경우가 있는데.. 이것을 해결할 수 있는 간단한 트릭을 이 자리에서 설명하고자 합니다. ^^&lt;/p&gt;</description>
    </item>
    <item>
      <title>MariaDB의 FederatedX 엔진으로 데이터를 주물러보자.</title>
      <link>//localhost:1313/2014/12/mariadb-federatedx-usage/</link>
      <pubDate>Tue, 30 Dec 2014 13:12:02 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2014/12/mariadb-federatedx-usage/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;FederatedX는 MariaDB에서 제공하는 확장된 기능의 Federated이며, 기본적으로 MariaDB에서는 별다른 옵션 없이 사용할 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;바로 이전 포스팅(&lt;a href=&#34;//localhost:1313/2014/12/how-to-migrate-100million-with-federatedx/&#34;&gt;MariaDB의 FederatedX 엔진을 활용한 9억 데이터 이관기&lt;/a&gt;)에서는 이 FederatedX 엔진을 활용하여 대용량 테이블을 서비스에 큰 지장없이 이관을 했던 사례에 대해서 정리를 했었는데요. 이 경험을 바탕으로 서비스에서 조금 더 유용하게 활용할 수 있을 방안에 대해서 상상(?)을 해보았습니다.&lt;/p&gt;&#xA;&lt;p&gt;즉, 지금부터는 FederatedX 엔진 관련된 테스트를 바탕으로 정리하는 내용이오니, 만약 실 서비스에 적용하고자 한다면 반드시 검증 후 진행하셔야 합니다. ^^&lt;/p&gt;</description>
    </item>
    <item>
      <title>MariaDB의 FederatedX 엔진을 활용한 9억 데이터 이관기</title>
      <link>//localhost:1313/2014/12/how-to-migrate-100million-with-federatedx/</link>
      <pubDate>Sat, 27 Dec 2014 14:16:23 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2014/12/how-to-migrate-100million-with-federatedx/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;대용량 로그 테이블은 때로는 서비스에 지대한 영향을 미치기도 합니다. 게다가 이 테이블을 파티셔닝 구성을 해야하는데, 이를 서비스 운영 중인 상태에서 마스터 장비에서 Import하는 것은 사실 대단히 위험한 시도이기도 하죠.&lt;/p&gt;&#xA;&lt;p&gt;이런 상황에서 얼마 전 FederatedX엔진을 활용하여 9억 데이터를 이관한 사례가 있는데, 이에 대해 공유하도록 하겠습니다. ^^&lt;/p&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;p&gt;9억 건의 데이터를 Import하는 동안 &lt;strong&gt;서비스에는 어떠한 영향도 없어야 하며&lt;/strong&gt;, 구성 후 &lt;strong&gt;어플리케이션 적용 전까지 데이터가 정상적으로 동기화&lt;/strong&gt;되어야 합니다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;데이터 이동하는 동안 기존 서비스 영향 최소화 및 문제 발생 시 빠른 원복&lt;/li&gt;&#xA;&lt;li&gt;데이터 구성 후 어플리케이션 코드 배포 전까지 데이터 동기화&lt;/li&gt;&#xA;&lt;li&gt;데이터 보관 주기 정책에 따른 유연한 대처&lt;br&gt;&#xA;현재는 삭제 주기가 없으나, 추후 정책에 따라 변경 가능&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;let-me-see&#34;&gt;Let me SEE..&lt;/h1&gt;&#xA;&lt;p&gt;가야할 골이 정해졌으니.. 현재 상황에 대해서 분석을 해봐야겠죠. ㅎㅎ 다음은 DB 사용 현황에 대한 내용입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MariaDB의 FederatedX를 소개합니다.</title>
      <link>//localhost:1313/2014/12/let-me-introduce-federatedx/</link>
      <pubDate>Fri, 05 Dec 2014 13:53:39 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2014/12/let-me-introduce-federatedx/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;MySQL에는 Federated라는 스토리지 엔진이 있는데, 이는 원격의 테이블에 접근하여 제어하기 위한 용도로 사용됩니다.  얼마 전 이 엔진과 관련하여 재미있는 테스트를 하였는데, 이 내용을 소개하기에 앞서서 간단하게 정리해보도록 하겠습니다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;features&#34;&gt;Features&lt;/h1&gt;&#xA;&lt;p&gt;FederatedX는 사실 MariaDB에서 Federated 엔진을 의미하는데, 이를 다른 이름으로 구분하는 것은 사실 더욱 확장된 기능을 가지기 때문입니다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;원격 서버 접근&lt;/strong&gt;&lt;br&gt;&#xA;원격에 있는 테이블을 로컬에 있는 것처럼 사용&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;트랜잭션&lt;/strong&gt;&lt;br&gt;&#xA;2-Phase Commit 형태로 데이터의 일관성을 유지&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;파티셔닝&lt;/strong&gt;&lt;br&gt;&#xA;각 파티셔닝 별로 다른 원격 테이블 참조 가능&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;&#xA;&lt;p&gt;FederatedX 스토리지 엔진은 MariaDB에서는 기본적으로는 활성화되어 있습니다. MySQL에서는 별도의 옵션을 줘야만 활성화되는 것과는 다른 측면이죠.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TokuDB? Fractal Index에 대해 알아보아요~!</title>
      <link>//localhost:1313/2014/05/fractal-index-in-tokudb/</link>
      <pubDate>Thu, 29 May 2014 14:14:11 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2014/05/fractal-index-in-tokudb/</guid>
      <description>&lt;p&gt;이 글은 제가 MySQL Power Group에 예전에 포스팅한 자료입니다.&lt;br&gt;&#xA;참고 : &lt;a href=&#34;http://cafe.naver.com/mysqlpg/189&#34;&gt;http://cafe.naver.com/mysqlpg/189&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;과거와는 다르게 데이터 사이즈가 비약적으로 커지고 있습니다. 특히, 최근 들어 SNS 서비스가 성황을 이루면서, 개인화된 데이터는 날이 갈수록 기하 급수적으로 늘어나고 있습니다. 최근 Fratical Index 기반의 TokuDB가 오픈 소스로 풀리면서 재조명을 받고 있는데, 이에 대해서 간단하게 설명해보도록 하겠습니다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;b-tree&#34;&gt;&lt;code&gt;B-Tree&lt;/code&gt;?&lt;/h1&gt;&#xA;&lt;p&gt;TokuDB에 논하기에 앞서, 전통적인 트리 구조인 &lt;code&gt;B-Tree&lt;/code&gt;에 대해 알아보도록 하죠.&lt;/p&gt;&#xA;&lt;p&gt;일반적으로 RDBMS에서 인덱스는 대부분 &lt;code&gt;B-Tree&lt;/code&gt;기반으로 동작하는데, 크게는 &lt;code&gt;Internal Node&lt;/code&gt;와 &lt;code&gt;Leaf Node&lt;/code&gt;로 나뉩니다. &lt;strong&gt;Internal Node는 데이터를 어느 방향(작으면 왼쪽, 크거나 같으면 오른쪽)으로 보낼 지 결정하는 Pivot과 다음 Pivot의 위치를 알려주는 포인터로 구성&lt;/strong&gt;됩니다. Internal Node의 가장 마지막 포인터는 Leaf Node를 향하는데, &lt;strong&gt;Leaf Node에는 보통은 데이터가 저장&lt;/strong&gt;이 되죠.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MariaDB/Galera Cluster 기술 노트!!</title>
      <link>//localhost:1313/2012/09/mariadb-galera-cluster/</link>
      <pubDate>Wed, 12 Sep 2012 06:38:23 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2012/09/mariadb-galera-cluster/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;MariaDB에서 MariaDB/Galera Cluster 제품군을 새롭게 출시하였습니다.MariaDB/Galera는 MariaDB의 &lt;strong&gt;Synchronous 방식으로 동작하는 다중 마스터 클러스터&lt;/strong&gt;입니다.&lt;/p&gt;&#xA;&lt;p&gt;MariaDB/Galera Cluster은 Galera 라이브러리를 사용하여 노드 간 데이터 복제를 수행합니다. 물론 아직은 Alpha 버전으로 발표되기는 했지만, 조만간 안정적인 버전이 릴리즈 되면 상당한 물건이 될만한 놈입니다.&lt;/p&gt;&#xA;&lt;p&gt;오늘은 이에 관해 간단하게 리뷰를 하겠습니다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;feature--benefits&#34;&gt;Feature &amp;amp; Benefits&lt;/h1&gt;&#xA;&lt;p&gt;먼저 MariaDB/Galera Cluster의 특징은 다음과 같이 몇 가지로 나눠볼 수 있습니다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Synchronous 방식으로 노드 간 데이터 복제&lt;/li&gt;&#xA;&lt;li&gt;Active-Active 방식의 다중 마스터 구성 모든 노드에서 읽기/쓰기가 가능&lt;/li&gt;&#xA;&lt;li&gt;클러스터 내 노드 자동 컨트롤 특정 노드 장애 시 자동으로 해당 노드 제거&lt;/li&gt;&#xA;&lt;li&gt;자동으로 신규 노드 추가&lt;/li&gt;&#xA;&lt;li&gt;완벽한 병렬적으로 데이터를 행단위로 복제&lt;/li&gt;&#xA;&lt;li&gt;기존의 MySQL 클라이언트 방식으로 동작&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//localhost:1313/img/2012/09/cluster-diagram1.png&#34; alt=&#34;cluster-diagram1&#34;&gt;&#xA;출처 : &lt;a href=&#34;http://www.percona.com/doc/percona-xtradb-cluster/_images/cluster-diagram1.png&#34;&gt;http://www.percona.com/doc/percona-xtradb-cluster/_images/cluster-diagram1.png&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maria 2탄 – 진화하는 Maria, 함께하는 MySQL!!</title>
      <link>//localhost:1313/2012/07/improve-mariadb-mysql/</link>
      <pubDate>Tue, 17 Jul 2012 02:13:57 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2012/07/improve-mariadb-mysql/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;MySQL 오픈 소스 진영은 더이상 단순 데이터 처리에만 강한 DBMS이기를 거부합니다. 이제는 대용량 처리에 적합하도록 탈바꿈 중입니다.&lt;/p&gt;&#xA;&lt;p&gt;지금까지 MySQL에서는 단일 쓰레드로 Nested Loop 방식으로 쿼리를 처리하였기 때문에, 조인 건 수가 대형화될 수록 성능이 급속도로 악화되었습니다.&lt;/p&gt;&#xA;&lt;p&gt;MariaDB는 5.3버전부터 DB 엔진과 스토리지 엔진 간의 데이터 전송이 개선되었고, 조인 시 추가적인 블록 기반의 조인 알고리즘을 제공합니다. 물론 MySQL도 5.6버전부터는 관련 기능을 어느정도 지원합니다.&lt;/p&gt;&#xA;&lt;p&gt;변화하는 MariaDB에 대해 몇 가지 소개하도록 하겠습니다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;disk-access-optimization&#34;&gt;Disk access optimization&lt;/h1&gt;&#xA;&lt;h3 id=&#34;1-index-condition-pushdown&#34;&gt;1) Index Condition Pushdown&lt;/h3&gt;&#xA;&lt;p&gt;MySQL/MariaDB는 구조적으로 DB 엔진과 스토리지 엔진 역할이 명확하게 구분됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maria 1탄 – MySQL의 쌍둥이 형제 MariaDB를 소개합니다.</title>
      <link>//localhost:1313/2012/06/let-me-introduce-mariadb/</link>
      <pubDate>Mon, 18 Jun 2012 10:27:47 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2012/06/let-me-introduce-mariadb/</guid>
      <description>&lt;h1 id=&#34;mariadb란&#34;&gt;MariaDB란?&lt;/h1&gt;&#xA;&lt;p&gt;MySQL이 Sun Microsystems로 넘어가면서 당시 MySQL AB 출신들이 따로 나와서 MySQL을 기반으로 한 다른 오픈 소스 기반의 DBMS를 배포했다고 합니다. 바로 MariaDB가 그것이며 MySQL과 유전 정보를 그대로 고수한 진짜 오픈 소스 기반의 DBMS입니다.&lt;/p&gt;&#xA;&lt;p&gt;현재 Monty Program AB와 MariaDB Community에서 개발하고 있으며, MySQL과 기본적으로 구조 및 사용 방법 등 모두 동일합니다. (동일 소스에서 개발되고 있으니 당연한 말입니다.)&lt;/p&gt;&#xA;&lt;p&gt;Monty Program AB에 따르면 많은 기능들이 MariaDB에서 먼저 구현을 하고 그 후 MySQL에도 반영이 된다고 하는데, 마치 CentOS와 Redhat 리눅스 관계 같다는 생각이 듭니다.^^&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
