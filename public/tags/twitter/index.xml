<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Twitter on gywn&#39;s tech</title>
    <link>//localhost:1313/tags/twitter/</link>
    <description>Recent content in Twitter on gywn&#39;s tech</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>gywndi@gmail.com (gywndi)</managingEditor>
    <webMaster>gywndi@gmail.com (gywndi)</webMaster>
    <lastBuildDate>Tue, 19 Aug 2025 20:01:39 +0900</lastBuildDate>
    <atom:link href="//localhost:1313/tags/twitter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>트위터의 새로운 분산 관리 라이브러리 Gizzard를 소개합니다.</title>
      <link>//localhost:1313/2012/03/gizzard-a-library-for-creating-distributed-datastores/</link>
      <pubDate>Fri, 09 Mar 2012 04:45:12 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2012/03/gizzard-a-library-for-creating-distributed-datastores/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;바로 이전 &lt;a href=&#34;//localhost:1313/2012/03/new-tweet-store/&#34;&gt;하루 2.5억 트윗을 저장하는 트위터의 새로운 저장 스토어&lt;/a&gt; 포스팅에서 트위터의 새로운 저장 스토어에 관해서 전반적으로 설명 드렸는데요, 이번에는 그 중 Gizzard에 관해서 심층 분석(?)을 해볼까합니다.&lt;/p&gt;&#xA;&lt;p&gt;Gizzard는 트위터에서 데이터를 분산 및 복제 관리하기 위한 자체 개발 프레임워크입니다. 클라이언트와 서버 사이에 위치하며 모든 데이터 요청을 처리하는 구조입니다. Gizzard 관련 몇 가지 키워드는 아래와 같습니다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;분산 관리(Sharding), 분할(Partitioning), 복제(Replication)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;부하분산(Load-Balancing)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;장애복구(Fail-Over)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;멱등성(idempotent), 가환성(commutative)&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;멱등성 : 연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질&lt;/li&gt;&#xA;&lt;li&gt;가환성 : 연산의 순서를 바꾸어도 그 결과가 변하지 않는 일&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;분산-관리sharding이란&#34;&gt;분산 관리(Sharding)이란?&lt;/h1&gt;&#xA;&lt;p&gt;과거에는 서비스 성능 저하가 발생하면 곧바로 해당 서버에 CPU또는 Memory 사이즈를 증설하여 성능 이슈를 해결하였습니다. 하지만, 최근 Web 서비스에서 데이터 사이즈가 급증하여, 더 이상은 서버 성능 고도화만으로는 한계가 있기 때문에, &lt;strong&gt;다수 장비에 데이터를 분산 위치(Data Sharding)하여 데이터를 처리&lt;/strong&gt;하는 움직임이 일반화되고 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>하루 2.5억 트윗을 저장하는 트위터의 새로운 저장 스토어</title>
      <link>//localhost:1313/2012/03/new-tweet-store/</link>
      <pubDate>Thu, 08 Mar 2012 01:46:30 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2012/03/new-tweet-store/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;트위터는 하루 평균 2.5억 건의 트윗을 저장한다고 합니다. 과거 트위터는 날짜 기준으로 데이터를 분할 관리하여 저장을 하였고, 대략 3주에 한번씩 서버를 추가하여 Scale-out 하였습니다.&lt;/p&gt;&#xA;&lt;p&gt;하지만 이 방식에는 다음과 같은 문제가 있었습니다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;부하 분산&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;고비용&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;복잡한 프로세스&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;문제를 해결하기 위해서 트위터에서 New Tweet Store를 고안했다고 합니다.&lt;/p&gt;&#xA;&lt;p&gt;자, 그럼 기존 문제점부터 차근차근 알아보도록 합시다^^;&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems&#34;&gt;Problems&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;부하 분산(Load Balancing)&lt;/strong&gt;&lt;br&gt;&#xA;날짜 기준으로 데이터를 나눠서 분산 저장 및 관리하기 때문에, 시간이 지날수록 과거 데이터 조회 건수는 비약적으로 낮아집니다. 특히 대부분의 데이터 조회 요청은 현재 시각 기준으로 들어오기 때문에, 데이터 읽기 HOTSPOT이 발생할 수 밖에 없습니다.&#xA;&lt;img src=&#34;//localhost:1313/img/2012/03/old_load_balancing.png&#34; alt=&#34;Load Balancing Problem&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
