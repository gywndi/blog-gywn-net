<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memcached on gywn&#39;s tech</title>
    <link>//localhost:1313/tags/memcached/</link>
    <description>Recent content in Memcached on gywn&#39;s tech</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>gywndi@gmail.com (gywndi)</managingEditor>
    <webMaster>gywndi@gmail.com (gywndi)</webMaster>
    <lastBuildDate>Mon, 31 Aug 2020 00:55:06 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/memcached/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL binlog파서와  memcached plugin의 콜라보레이션!</title>
      <link>//localhost:1313/2020/08/mysql-binlog-memcached-plugin-collaboration/</link>
      <pubDate>Mon, 31 Aug 2020 00:55:06 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2020/08/mysql-binlog-memcached-plugin-collaboration/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;6개월도 훌쩍 넘은 시간에. 간만에 포스팅합니다. 그동안 OGG javaue든, MySQL Binlog파서든.. &lt;strong&gt;흐르는 데이터를 핸들링하는 고민&lt;/strong&gt;으로 하루하루를 지내왔던 것 같아요. 그러던 중 이전 포스팅에서 주제로 삼았던, &lt;strong&gt;InnoDB memcached plugin을 Binlog parsing을 통해 데이터를 맞추면 좋을 것 같다&lt;/strong&gt;는 생각이 들었습니다.&lt;br&gt;&#xA;오늘 이 자리에서는 이런 답답함을 극복하고자, Binlog 이벤트를 활용하여, 최신 데이터를 유지시키는 방안에 대해서 이야기를 해보도록 하겠습니다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;mysql-binary-log&#34;&gt;MySQL Binary log?&lt;/h1&gt;&#xA;&lt;p&gt;MySQL에서 데이터복제를 위해서는 Binnary Log(binlog)를 쓰게 되는데, 이중 ROW 포멧으로 만들어지는 이벤트를 활용하여 다양한 데이터 핸들링이 가능합니다.&lt;br&gt;&#xA;&lt;img src=&#34;//localhost:1313/2020/08/image-1598580840319.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQL InnoDB의 메모리 캐시 서버로 변신! – 활용편 –</title>
      <link>//localhost:1313/2020/01/mysql-innodb-as-cache-server-monitoring-advanced/</link>
      <pubDate>Mon, 06 Jan 2020 14:10:44 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2020/01/mysql-innodb-as-cache-server-monitoring-advanced/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;벌써 새해가 밝았네요. 새해 복 많이 받고 계시쥬?&lt;/p&gt;&#xA;&lt;p&gt;판교 생활을 한지도 벌써 만 7년을 훌쩍 지나, 8년을 향해 가고 있군요. 2020년 우주의 원더키디(아재 인증)의 그 시간이 이렇게나 빠르게 찾아올 줄은 그때의 저는 몰랐답니다. ㅠㅠ&lt;/p&gt;&#xA;&lt;p&gt;오늘 주제는, 그동안 MySQL innodb memcached 플러그인의 마지막편, (지극히 개인적인 의견인) 서비스적인 활용 편입니다. 상상의 날개를 펼쳐서, 서비스 최우선적인 활용을 위해 무엇을 꿈꿔볼 수 있을지, 이야기 해보고자 합니다. (이전 포스팅은 하단을 참고요.)&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;//localhost:1313/2019/09/mysql-innodb-as-cache-server-config/&#34;&gt;1탄. MySQL InnoDB의 메모리 캐시 서버로 변신! – 설정편 –&lt;/a&gt;&lt;br&gt;&#xA;&lt;a href=&#34;//localhost:1313/2019/09/mysql-innodb-as-cache-server-monitoring/&#34;&gt;2탄. MySQL InnoDB의 메모리 캐시 서버로 변신! – 모니터링편 –&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQL InnoDB의 메모리 캐시 서버로 변신! – 모니터링편 –</title>
      <link>//localhost:1313/2019/09/mysql-innodb-as-cache-server-monitoring/</link>
      <pubDate>Thu, 19 Sep 2019 14:28:50 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2019/09/mysql-innodb-as-cache-server-monitoring/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;MySQL memcached plugin 2탄! 모니터링편입니다.&lt;br&gt;&#xA;어떤 초호화 솔루션일지라도, 시스템의 정확한 상태를 파악할 수 없다면, 사용하기에는 참으로 꺼려집니다. 그래서 어떤 방법이든, &lt;strong&gt;가장 효율적인 모니터링 방안&lt;/strong&gt;을 찾아봐야 하겠는데요. 저는 개인적으로는 &lt;strong&gt;prometheus를 활용한 metric수집을 선호&lt;/strong&gt;합니다.&lt;br&gt;&#xA;오늘 이 자리에서는 Prometheus에서 MySQL InnoDB memcached plugin을 모니터링 하는 방법에 대해서 이야기를 해보도록 하겠습니다. 🙂&lt;/p&gt;&#xA;&lt;h1 id=&#34;why-prometheus&#34;&gt;Why prometheus?&lt;/h1&gt;&#xA;&lt;p&gt;이유는 단순합니다. &lt;strong&gt;이미 만들어져 있는 exporter가 굉장히 많다&lt;/strong&gt;는 것, 만약 원하는 것들이 있다면 &lt;strong&gt;나의 구미에 맞게 기능을 추가해서 쉽게 접근할 수 있다&lt;/strong&gt;는 것! 즉, &lt;strong&gt;오픈소스&lt;/strong&gt;라는 것!! 무엇보다 Time-series 기반의 데이터 저장소인 Prometheus로 정말로 효율적으로 모니터링 매트릭 정보를 수집할 수 있다는 것! Prometheus는 &lt;strong&gt;로그 수집에 최적화&lt;/strong&gt; 되어 있다고 과언이 아닙니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQL InnoDB의 메모리 캐시 서버로 변신! – 설정편 –</title>
      <link>//localhost:1313/2019/09/mysql-innodb-as-cache-server-config/</link>
      <pubDate>Sun, 15 Sep 2019 11:50:15 +0000</pubDate><author>gywndi@gmail.com (gywndi)</author>
      <guid>//localhost:1313/2019/09/mysql-innodb-as-cache-server-config/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;꽤나 오래전의 일이었습니다. MariaDB에서 Handler Socket이 들어간 이후 얼마 후인 것으로 기억합니다. &lt;strong&gt;MySQL lab버전에 memcached plugin 기능이 추가&lt;/strong&gt;되었고, &lt;strong&gt;memcache protocal로 InnoDB 데이터에 직접 접근&lt;/strong&gt;할 수 있는 길이 열린 것이었죠. (아마도 거의 8년 정도 전의 일이었던 것같은..) 아무튼 당시, 이것에 대해 간단하게 테스트만 해보고, MySQL을 캐시형태로 잘 활용할 수 있겠다라는 희망만 품고 지나버렸다는 기억이 나네요.&lt;/p&gt;&#xA;&lt;p&gt;이제 Disk는 과거의 통돌이 디스크가 아니죠. 기계 장치를 탈피하여, 이제는 모터없는 전자기기.. &lt;strong&gt;SSD의 시대가 도래&lt;/strong&gt;하였습니다. 통돌이 대비, 어마어마한 수치의 Random I/O를 제공해주는만큼, 이제 DB 데이터에 새로운 패러다임(?)으로 접근할 수 있겠다는 시점이 온 것 같아요.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
